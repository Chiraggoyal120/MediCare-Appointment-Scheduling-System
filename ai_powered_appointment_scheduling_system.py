# -*- coding: utf-8 -*-
"""AI-Powered Appointment Scheduling System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ncgiCgNoRtqp0q_zylxgknGpGlg-P9xC
"""

! pip install -q gradio langchain pandas faker openpyxl python-dateutil xlsxwriter schedule openai

import gradio as gr
import pandas as pd
import sqlite3
import json
import re
from datetime import datetime, timedelta
from faker import Faker
import random
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from pathlib import Path
import os
import threading
import time
from io import BytesIO

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize Faker for synthetic data
fake = Faker()

@dataclass
class Patient:
    patient_id: str
    first_name: str
    last_name: str
    dob: str
    phone: str
    email: str
    insurance_carrier: str = ""
    member_id: str = ""
    group_number: str = ""
    is_new: bool = True

@dataclass
class Appointment:
    appointment_id: str
    patient_id: str
    doctor: str
    date: str
    time: str
    duration: int  # minutes
    location: str
    status: str = "scheduled"

class DataManager:
    """Enhanced data manager with complete functionality"""

    def __init__(self):
        self.setup_database()
        self.generate_synthetic_data()

    def setup_database(self):
        """Initialize SQLite database with all required tables"""
        self.conn = sqlite3.connect(':memory:', check_same_thread=False)

        # Patients table
        self.conn.execute('''
            CREATE TABLE patients (
                patient_id TEXT PRIMARY KEY,
                first_name TEXT,
                last_name TEXT,
                dob TEXT,
                phone TEXT,
                email TEXT,
                insurance_carrier TEXT,
                member_id TEXT,
                group_number TEXT,
                is_new BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # Appointments table
        self.conn.execute('''
            CREATE TABLE appointments (
                appointment_id TEXT PRIMARY KEY,
                patient_id TEXT,
                doctor TEXT,
                date TEXT,
                time TEXT,
                duration INTEGER,
                location TEXT,
                status TEXT DEFAULT 'scheduled',
                cancellation_reason TEXT,
                calendly_event_id TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (patient_id) REFERENCES patients (patient_id)
            )
        ''')

        # Doctor schedule table
        self.conn.execute('''
            CREATE TABLE doctor_schedule (
                schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,
                doctor TEXT,
                date TEXT,
                time TEXT,
                location TEXT,
                available BOOLEAN DEFAULT 1
            )
        ''')

        # Reminders table
        self.conn.execute('''
            CREATE TABLE reminders (
                reminder_id TEXT PRIMARY KEY,
                appointment_id TEXT,
                reminder_type TEXT,
                scheduled_time TEXT,
                sent_time TEXT,
                status TEXT DEFAULT 'scheduled',
                response TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (appointment_id) REFERENCES appointments (appointment_id)
            )
        ''')

        # Form status table
        self.conn.execute('''
            CREATE TABLE form_status (
                appointment_id TEXT PRIMARY KEY,
                forms_sent BOOLEAN DEFAULT 0,
                forms_completed BOOLEAN DEFAULT 0,
                completion_date TEXT,
                reminder_count INTEGER DEFAULT 0,
                access_code TEXT,
                FOREIGN KEY (appointment_id) REFERENCES appointments (appointment_id)
            )
        ''')

        self.conn.commit()

    def generate_synthetic_data(self):
        """Generate comprehensive synthetic data"""
        doctors = [
            "Dr. Sarah Smith (Allergy Specialist)",
            "Dr. Michael Johnson (Pulmonologist)",
            "Dr. Emily Williams (Immunologist)",
            "Dr. David Brown (General Practice)",
            "Dr. Lisa Davis (Pediatric Allergist)"
        ]
        locations = ["Main Clinic", "Downtown Branch", "Northside Office"]
        insurance_carriers = ["Blue Cross Blue Shield", "Aetna", "United Healthcare", "Cigna", "Humana", "Kaiser Permanente"]

        # Generate 20 synthetic patients
        patients_data = []
        for i in range(20):
            patient_id = f"PAT{i+1:03d}"
            patients_data.append((
                patient_id,
                fake.first_name(),
                fake.last_name(),
                fake.date_of_birth(minimum_age=18, maximum_age=80).strftime('%m/%d/%Y'),
                fake.phone_number(),
                fake.email(),
                random.choice(insurance_carriers),
                f"{fake.random_number(digits=9):09d}",
                f"{fake.random_number(digits=6):06d}",
                random.choice([0, 1])  # is_new
            ))

        self.conn.executemany('''
            INSERT INTO patients VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'))
        ''', patients_data)

        # Generate doctor schedules (14 days ahead)
        schedule_data = []
        for doctor in doctors:
            for days_ahead in range(14):
                date = (datetime.now() + timedelta(days=days_ahead)).strftime('%Y-%m-%d')
                weekday = (datetime.now() + timedelta(days=days_ahead)).weekday()
                if weekday >= 5:  # Skip weekends
                    continue

                for hour in range(9, 17):  # 9 AM to 5 PM
                    for minute in [0, 30]:  # 30-minute slots
                        time = f"{hour:02d}:{minute:02d}"
                        location = random.choice(locations)
                        available = random.choice([True, True, True, False])  # 75% available
                        schedule_data.append((doctor, date, time, location, available))

        self.conn.executemany('''
            INSERT INTO doctor_schedule (doctor, date, time, location, available)
            VALUES (?, ?, ?, ?, ?)
        ''', schedule_data)

        self.conn.commit()
        logger.info(f"Generated {len(patients_data)} patients and {len(schedule_data)} schedule slots")

    def search_patient(self, first_name: str, last_name: str, dob: str) -> Optional[Patient]:
        """Search for existing patient"""
        # Clean and format inputs
        first_name = first_name.strip()
        last_name = last_name.strip()
        dob = dob.strip()

        cursor = self.conn.execute('''
            SELECT * FROM patients
            WHERE LOWER(TRIM(first_name)) = LOWER(?) AND LOWER(TRIM(last_name)) = LOWER(?) AND dob = ?
        ''', (first_name, last_name, dob))

        result = cursor.fetchone()
        if result:
            return Patient(
                patient_id=result[0],
                first_name=result[1],
                last_name=result[2],
                dob=result[3],
                phone=result[4],
                email=result[5],
                insurance_carrier=result[6],
                member_id=result[7],
                group_number=result[8],
                is_new=bool(result[9])
            )
        return None

    def create_patient(self, first_name: str, last_name: str, dob: str, phone: str, email: str,
                      insurance_carrier: str = "", member_id: str = "", group_number: str = "") -> str:
        """Create new patient"""
        try:
            # Generate unique patient ID
            cursor = self.conn.execute('SELECT COUNT(*) FROM patients')
            count = cursor.fetchone()[0]
            patient_id = f"PAT{count+1:03d}"

            self.conn.execute('''
                INSERT INTO patients VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 1, datetime('now'))
            ''', (patient_id, first_name.strip(), last_name.strip(), dob.strip(),
                  phone.strip(), email.strip(), insurance_carrier, member_id, group_number))

            self.conn.commit()
            return patient_id
        except Exception as e:
            logger.error(f"Error creating patient: {e}")
            return ""

    def get_available_slots(self, doctor: str, location: str, days_ahead: int = 7) -> List[Dict]:
        """Get available appointment slots"""
        start_date = datetime.now().strftime('%Y-%m-%d')
        end_date = (datetime.now() + timedelta(days=days_ahead)).strftime('%Y-%m-%d')

        cursor = self.conn.execute('''
            SELECT date, time FROM doctor_schedule
            WHERE doctor = ? AND location = ? AND date BETWEEN ? AND ? AND available = 1
            ORDER BY date, time
        ''', (doctor, location, start_date, end_date))

        return [{"date": row[0], "time": row[1]} for row in cursor.fetchall()]

    def book_appointment(self, appointment: Appointment) -> bool:
        """Book appointment and update schedule"""
        try:
            # Mark slots as unavailable
            slots_to_block = [appointment.time]
            if appointment.duration == 60:
                current_time = datetime.strptime(appointment.time, '%H:%M')
                next_slot_time = (current_time + timedelta(minutes=30)).strftime('%H:%M')
                slots_to_block.append(next_slot_time)

            for slot_time in slots_to_block:
                self.conn.execute('''
                    UPDATE doctor_schedule
                    SET available = 0
                    WHERE doctor = ? AND date = ? AND time = ? AND location = ?
                ''', (appointment.doctor, appointment.date, slot_time, appointment.location))

            # Insert appointment
            calendly_id = f"calendly_{appointment.appointment_id}"
            self.conn.execute('''
                INSERT INTO appointments VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'))
            ''', (
                appointment.appointment_id, appointment.patient_id, appointment.doctor,
                appointment.date, appointment.time, appointment.duration, appointment.location,
                appointment.status, None, calendly_id
            ))

            self.conn.commit()
            return True
        except Exception as e:
            logger.error(f"Error booking appointment: {e}")
            self.conn.rollback()
            return False

    def get_appointment_by_id(self, appointment_id: str) -> Optional[Dict]:
        """Get appointment details by ID"""
        try:
            cursor = self.conn.execute('''
                SELECT a.*, p.first_name, p.last_name, p.phone, p.email
                FROM appointments a
                JOIN patients p ON a.patient_id = p.patient_id
                WHERE a.appointment_id = ?
            ''', (appointment_id,))

            result = cursor.fetchone()
            if result:
                return {
                    'appointment_id': result[0],
                    'patient_id': result[1],
                    'doctor': result[2],
                    'date': result[3],
                    'time': result[4],
                    'duration': result[5],
                    'location': result[6],
                    'status': result[7],
                    'cancellation_reason': result[8],
                    'calendly_event_id': result[9],
                    'patient_name': f"{result[11]} {result[12]}",
                    'patient_phone': result[13],
                    'patient_email': result[14]
                }
            return None
        except Exception as e:
            logger.error(f"Error getting appointment: {e}")
            return None

    def cancel_appointment(self, appointment_id: str, reason: str = "") -> bool:
        """Cancel an appointment"""
        try:
            # Get appointment details first
            appointment = self.get_appointment_by_id(appointment_id)
            if not appointment:
                return False

            # Update appointment status
            self.conn.execute('''
                UPDATE appointments
                SET status = 'cancelled', cancellation_reason = ?
                WHERE appointment_id = ?
            ''', (reason, appointment_id))

            # Free up the schedule slots
            slots_to_free = [appointment['time']]
            if appointment['duration'] == 60:
                current_time = datetime.strptime(appointment['time'], '%H:%M')
                next_slot_time = (current_time + timedelta(minutes=30)).strftime('%H:%M')
                slots_to_free.append(next_slot_time)

            for slot_time in slots_to_free:
                self.conn.execute('''
                    UPDATE doctor_schedule
                    SET available = 1
                    WHERE doctor = ? AND date = ? AND time = ? AND location = ?
                ''', (appointment['doctor'], appointment['date'], slot_time, appointment['location']))

            self.conn.commit()
            return True
        except Exception as e:
            logger.error(f"Error cancelling appointment: {e}")
            self.conn.rollback()
            return False

class AppointmentScheduler:
    """Main appointment scheduling system"""

    def __init__(self):
        self.data_manager = DataManager()

        # Available doctors and locations
        self.doctors = [
            "Dr. Sarah Smith (Allergy Specialist)",
            "Dr. Michael Johnson (Pulmonologist)",
            "Dr. Emily Williams (Immunologist)",
            "Dr. David Brown (General Practice)",
            "Dr. Lisa Davis (Pediatric Allergist)"
        ]

        self.locations = ["Main Clinic", "Downtown Branch", "Northside Office"]

        # Store registered patients for current session
        self.session_patients = {}

    def process_patient_info(self, first_name: str, last_name: str, dob: str,
                           phone: str, email: str, insurance_carrier: str = "",
                           member_id: str = "", group_number: str = "") -> str:
        """Process patient information and determine if new or returning"""
        try:
            if not all([first_name, last_name, dob, phone, email]):
                return "❌ Please fill in all required fields (Name, DOB, Phone, Email)"

            # Search for existing patient
            existing_patient = self.data_manager.search_patient(first_name, last_name, dob)

            if existing_patient:
                # Store in session
                session_key = f"{first_name}_{last_name}_{dob}"
                self.session_patients[session_key] = existing_patient

                return f"""
✅ **Welcome Back, {existing_patient.first_name}!**

Found your record:
- Patient ID: {existing_patient.patient_id}
- Phone: {existing_patient.phone}
- Email: {existing_patient.email}
- Insurance: {existing_patient.insurance_carrier}

**As a returning patient, your appointment will be 30 minutes.**

✅ Patient registered for this session. You can now schedule an appointment!
                """
            else:
                # Create new patient
                patient_id = self.data_manager.create_patient(
                    first_name, last_name, dob, phone, email,
                    insurance_carrier, member_id, group_number
                )

                if patient_id:
                    # Store in session
                    new_patient = Patient(
                        patient_id=patient_id,
                        first_name=first_name,
                        last_name=last_name,
                        dob=dob,
                        phone=phone,
                        email=email,
                        insurance_carrier=insurance_carrier,
                        member_id=member_id,
                        group_number=group_number,
                        is_new=True
                    )
                    session_key = f"{first_name}_{last_name}_{dob}"
                    self.session_patients[session_key] = new_patient

                    return f"""
🆕 **Welcome to MediCare, {first_name}!**

Created new patient record:
- Patient ID: {patient_id}
- Phone: {phone}
- Email: {email}
- Insurance: {insurance_carrier or 'Not provided'}

**As a new patient, your appointment will be 60 minutes.**

✅ Patient registered for this session. You can now schedule an appointment!
                    """
                else:
                    return "❌ Error creating patient record. Please try again."

        except Exception as e:
            logger.error(f"Error processing patient info: {e}")
            return f"❌ Error processing patient information: {str(e)}"

    def get_available_appointments(self, doctor: str, location: str) -> str:
        """Get available appointment slots"""
        try:
            slots = self.data_manager.get_available_slots(doctor, location, days_ahead=14)

            if not slots:
                return f"❌ No available slots found for {doctor} at {location}. Please try different options."

            # Group by date
            slots_by_date = {}
            for slot in slots[:30]:  # Limit to first 30 slots
                date = slot['date']
                if date not in slots_by_date:
                    slots_by_date[date] = []

                # Convert time to 12-hour format
                time_24 = datetime.strptime(slot['time'], '%H:%M')
                time_12 = time_24.strftime('%I:%M %p')
                slots_by_date[date].append(time_12)

            result = f"📅 **Available Appointments**\n\n**Doctor**: {doctor}\n**Location**: {location}\n\n"

            for date, times in list(slots_by_date.items())[:7]:  # Show first 7 days
                formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%A, %B %d, %Y')
                result += f"**{formatted_date}**\n"
                result += f"Times: {', '.join(times[:8])}\n\n"  # Show first 8 times per day

            return result

        except Exception as e:
            logger.error(f"Error getting available appointments: {e}")
            return "❌ Error retrieving available appointments."

    def book_appointment_slot(self, first_name: str, last_name: str, dob: str,
                            doctor: str, location: str, date: str, time: str) -> str:
        """Book the selected appointment slot"""
        try:
            if not all([first_name, last_name, dob, doctor, location, date, time]):
                return "❌ Please fill in all appointment details"

            # Find patient in session first
            session_key = f"{first_name}_{last_name}_{dob}"
            patient = self.session_patients.get(session_key)

            if not patient:
                # Fallback: search in database
                patient = self.data_manager.search_patient(first_name, last_name, dob)
                if not patient:
                    return "❌ Patient not found. Please register the patient first in the 'Patient Registration' tab."

            # Generate appointment ID
            appointment_id = f"APT{random.randint(1000, 9999)}"

            # Determine duration based on patient type
            duration = 60 if patient.is_new else 30

            # Convert date format if needed
            try:
                if '/' in date:
                    date_obj = datetime.strptime(date, '%m/%d/%Y')
                    date = date_obj.strftime('%Y-%m-%d')
                elif len(date.split('-')[0]) == 4:  # Already in YYYY-MM-DD format
                    # Validate the date
                    datetime.strptime(date, '%Y-%m-%d')
                else:
                    return "❌ Invalid date format. Please use MM/DD/YYYY or YYYY-MM-DD."
            except ValueError:
                return "❌ Invalid date format. Please use MM/DD/YYYY or YYYY-MM-DD."

            # Convert time to 24-hour format
            try:
                if 'AM' in time.upper() or 'PM' in time.upper():
                    time_24 = datetime.strptime(time.strip(), '%I:%M %p').strftime('%H:%M')
                else:
                    # Validate 24-hour format
                    datetime.strptime(time.strip(), '%H:%M')
                    time_24 = time.strip()
            except ValueError:
                return "❌ Invalid time format. Please use HH:MM AM/PM or HH:MM (24-hour)."

            # Check if slot is still available
            available_slots = self.data_manager.get_available_slots(doctor, location, days_ahead=30)
            slot_available = any(s['date'] == date and s['time'] == time_24 for s in available_slots)

            if not slot_available:
                return "❌ This time slot is no longer available. Please check available slots again."

            # Create appointment
            appointment = Appointment(
                appointment_id=appointment_id,
                patient_id=patient.patient_id,
                doctor=doctor,
                date=date,
                time=time_24,
                duration=duration,
                location=location
            )

            # Book appointment
            success = self.data_manager.book_appointment(appointment)

            if success:
                # Format appointment details for display
                formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%A, %B %d, %Y')
                formatted_time = datetime.strptime(time_24, '%H:%M').strftime('%I:%M %p')

                result = f"""
✅ **APPOINTMENT CONFIRMED**

**Appointment Details:**
- Appointment ID: {appointment_id}
- Patient: {patient.first_name} {patient.last_name}
- Doctor: {doctor}
- Date: {formatted_date}
- Time: {formatted_time}
- Duration: {duration} minutes
- Location: {location}
- Status: Scheduled

**Next Steps:**
1. You will receive intake forms via email
2. Complete forms at least 24 hours before your appointment
3. You'll receive automated reminders

**Important Reminders:**
- Arrive 15 minutes early
- Bring photo ID and insurance cards
- If allergy testing is planned, stop antihistamines 7 days before

Questions? Call (555) 123-4567

**Confirmation sent to:** {patient.email}
                """

                return result
            else:
                return "❌ Failed to book appointment. The slot may no longer be available."

        except Exception as e:
            logger.error(f"Error booking appointment: {e}")
            return f"❌ Error booking appointment: {str(e)}"

def create_gradio_interface():
    """Create Gradio interface for the appointment system"""

    scheduler = AppointmentScheduler()

    def process_patient_details(first_name, last_name, dob, phone, email, insurance, member_id, group_number):
        """Process patient information"""
        return scheduler.process_patient_info(
            first_name, last_name, dob, phone, email, insurance, member_id, group_number
        )

    def show_available_slots(doctor, location):
        """Show available appointment slots"""
        if not doctor or not location:
            return "❌ Please select both doctor and location"

        return scheduler.get_available_appointments(doctor, location)

    def book_appointment_final(first_name, last_name, dob, doctor, location, date, time):
        """Final appointment booking"""
        return scheduler.book_appointment_slot(first_name, last_name, dob, doctor, location, date, time)

    def handle_reminder_action(appointment_id, action):
        """Handle reminder system actions"""
        try:
            if not appointment_id:
                return "❌ Please enter an Appointment ID"

            # Get appointment details
            appointment = scheduler.data_manager.get_appointment_by_id(appointment_id)
            if not appointment:
                return f"❌ Appointment ID '{appointment_id}' not found"

            action_lower = action.lower().strip()

            if action_lower.startswith('cancel'):
                reason = action[6:].strip() if len(action) > 6 else "Patient requested cancellation"
                success = scheduler.data_manager.cancel_appointment(appointment_id, reason)

                if success:
                    return f"""
✅ **APPOINTMENT CANCELLED**

**Cancelled Appointment:**
- Appointment ID: {appointment_id}
- Patient: {appointment['patient_name']}
- Doctor: {appointment['doctor']}
- Date: {appointment['date']}
- Time: {appointment['time']}
- Reason: {reason}

**Confirmation sent to:** {appointment['patient_email']}
**Call (555) 123-4567 to reschedule**
                    """
                else:
                    return "❌ Failed to cancel appointment. Please try again or call (555) 123-4567"

            elif action_lower in ['confirm', 'confirmed']:
                return f"""
✅ **APPOINTMENT CONFIRMED**

**Appointment Details:**
- Appointment ID: {appointment_id}
- Patient: {appointment['patient_name']}
- Doctor: {appointment['doctor']}
- Date: {appointment['date']}
- Time: {appointment['time']}
- Location: {appointment['location']}
- Status: Confirmed

**Thank you for confirming! See you then.**
                """

            elif action_lower in ['status', 'check']:
                status_emoji = "✅" if appointment['status'] == 'scheduled' else "❌" if appointment['status'] == 'cancelled' else "📋"
                return f"""
📋 **APPOINTMENT STATUS**

{status_emoji} **Current Status:** {appointment['status'].title()}

**Appointment Details:**
- Appointment ID: {appointment_id}
- Patient: {appointment['patient_name']}
- Doctor: {appointment['doctor']}
- Date: {appointment['date']}
- Time: {appointment['time']}
- Duration: {appointment['duration']} minutes
- Location: {appointment['location']}

**Contact Info:**
- Phone: {appointment['patient_phone']}
- Email: {appointment['patient_email']}
                """

            else:
                return f"""
❓ **Available Actions:**

Reply with one of these options:
- **"CANCEL [reason]"** - Cancel your appointment
- **"CONFIRM"** - Confirm your appointment
- **"STATUS"** - Check appointment details

**Your appointment:** {appointment_id}
**Patient:** {appointment['patient_name']}
**Date/Time:** {appointment['date']} at {appointment['time']}
                """

        except Exception as e:
            logger.error(f"Error handling reminder action: {e}")
            return f"❌ Error processing request: {str(e)}"

    def get_system_stats():
        """Get system statistics"""
        try:
            # Get appointment counts
            cursor = scheduler.data_manager.conn.execute('''
                SELECT
                    COUNT(*) as total_appointments,
                    SUM(CASE WHEN status = 'scheduled' THEN 1 ELSE 0 END) as scheduled,
                    SUM(CASE WHEN status = 'confirmed' THEN 1 ELSE 0 END) as confirmed,
                    SUM(CASE WHEN status = 'cancelled' THEN 1 ELSE 0 END) as cancelled
                FROM appointments
            ''')

            apt_stats = cursor.fetchone()

            # Get patient counts
            cursor = scheduler.data_manager.conn.execute('''
                SELECT
                    COUNT(*) as total_patients,
                    SUM(CASE WHEN is_new = 1 THEN 1 ELSE 0 END) as new_patients,
                    SUM(CASE WHEN is_new = 0 THEN 1 ELSE 0 END) as returning_patients
                FROM patients
            ''')

            patient_stats = cursor.fetchone()

            if apt_stats and patient_stats:
                total_apt, scheduled, confirmed, cancelled = apt_stats
                total_pat, new_pat, returning_pat = patient_stats

                return f"""📊 **System Statistics**

**Appointments:**
- Total Appointments: {total_apt}
- Scheduled: {scheduled}
- Confirmed: {confirmed}
- Cancelled: {cancelled}

**Patients:**
- Total Patients: {total_pat}
- New Patients: {new_pat}
- Returning Patients: {returning_pat}

**Session Patients Registered:** {len(scheduler.session_patients)}

**System Health:** ✅ All systems operational
                """
            else:
                return "No appointment data available yet. Schedule some appointments first!"

        except Exception as e:
            return f"❌ Error retrieving statistics: {str(e)}"

    def get_appointments_list():
        """Get list of recent appointments"""
        try:
            cursor = scheduler.data_manager.conn.execute('''
                SELECT a.appointment_id, p.first_name, p.last_name, a.doctor,
                       a.date, a.time, a.location, a.status, a.duration
                FROM appointments a
                JOIN patients p ON a.patient_id = p.patient_id
                ORDER BY a.date DESC, a.time DESC
                LIMIT 20
            ''')

            appointments = cursor.fetchall()

            if not appointments:
                return "No appointments found."

            result = "📅 **Recent Appointments**\n\n"

            for apt in appointments:
                apt_id, fname, lname, doctor, date, time, location, status, duration = apt

                # Format date and time
                try:
                    formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%m/%d/%Y')
                    formatted_time = datetime.strptime(time, '%H:%M').strftime('%I:%M %p')
                except:
                    formatted_date = date
                    formatted_time = time

                status_emoji = "✅" if status == 'scheduled' else "❌" if status == 'cancelled' else "📋"

                result += f"""
{status_emoji} **{apt_id}** - {fname} {lname}
   {doctor}
   {formatted_date} at {formatted_time} ({duration} min)
   📍 {location} | Status: {status.title()}
                """

            return result

        except Exception as e:
            logger.error(f"Error getting appointments list: {e}")
            return f"❌ Error retrieving appointments: {str(e)}"

    def smart_chat_response(message, history):
        """Improved AI chat with better intent recognition"""
        try:
            message_lower = message.lower().strip()

            if not message_lower:
                return "", history

            # Greeting responses
            if any(word in message_lower for word in ['hello', 'hi', 'start', 'help', 'greetings']):
                bot_message = """👋 Hello! I'm your MediCare AI assistant. I can help you with:

🏥 **Appointment Booking**: Schedule your visit
👤 **Patient Registration**: Register new or find existing patients
📅 **Available Slots**: Check doctor availability
🔔 **Reminders**: Manage appointment notifications
📋 **Forms**: Patient intake form assistance

What would you like to do today?"""

            # Registration help
            elif any(word in message_lower for word in ['register', 'registration', 'new patient', 'sign up']):
                bot_message = """📋 **Patient Registration Help**

To register a patient:
1. Go to the '👤 Patient Registration' tab
2. Fill in required information:
   - First Name
   - Last Name
   - Date of Birth (MM/DD/YYYY)
   - Phone Number
   - Email Address
3. Add insurance information (optional)
4. Click 'Register/Lookup Patient'

The system will check if you're a returning patient or create a new record."""

            # Scheduling help
            elif any(word in message_lower for word in ['schedule', 'appointment', 'book', 'booking']):
                bot_message = """📅 **Appointment Scheduling Help**

To schedule an appointment:
1. **First**: Register patient in '👤 Patient Registration' tab
2. **Then**: Go to '📅 Schedule Appointment' tab
3. Select your preferred doctor and location
4. Click 'Check Available Slots'
5. Fill in booking details with your chosen date/time
6. Click 'Book Appointment'

**Duration**: New patients get 60 minutes, returning patients get 30 minutes."""

            # Cancellation help
            elif any(word in message_lower for word in ['cancel', 'cancellation', 'reschedule']):
                bot_message = """❌ **Appointment Changes**

For cancellations or rescheduling:
- Use the '🔔 Reminder System' tab
- Enter your Appointment ID
- Type 'CANCEL [reason]' to cancel
- For rescheduling, cancel first then book a new appointment

**Note**: Cancel at least 24 hours in advance to avoid fees."""

            # Forms help
            elif any(word in message_lower for word in ['form', 'forms', 'intake', 'paperwork']):
                bot_message = """📋 **Patient Forms Help**

**Intake Forms are automatically sent after booking:**
- Medical History Questionnaire
- Allergy Assessment Form
- Insurance Verification
- Emergency Contact Information

**Access**: Check your email for the portal link and access code.
**Deadline**: Complete at least 24 hours before your appointment.
**Help**: Call (555) 123-4567 for technical support."""

            # Status check
            elif any(word in message_lower for word in ['status', 'my appointment', 'confirmation']):
                bot_message = """📋 **Check Appointment Status**

To check your appointment:
1. Go to '🔔 Reminder System' tab
2. Enter your Appointment ID (format: APT1234)
3. Type 'STATUS' as the action

**Need specific details?** Your confirmation email contains your Appointment ID."""

            # Error handling
            elif any(word in message_lower for word in ['error', 'problem', 'not working', 'issue']):
                bot_message = """🔧 **Troubleshooting Help**

Common issues and solutions:

**"Patient not found"**: Make sure to register in 'Patient Registration' tab first
**"No available slots"**: Try different doctor/location combinations
**"Invalid date/time"**: Use MM/DD/YYYY for dates, HH:MM AM/PM for times
**"Booking failed"**: The slot may be taken - check availability again

**Still having issues?** Call (555) 123-4567 for immediate assistance."""

            # Specific patient query
            elif 'chirag goyal' in message_lower:
                bot_message = """👋 Hi Chirag! I can help you schedule your appointment.

**Next steps:**
1. Go to '👤 Patient Registration' tab
2. Fill in your details:
   - First Name: Chirag
   - Last Name: Goyal
   - Date of Birth: 12/02/2003
   - Add your phone and email
3. Complete registration
4. Then schedule your appointment in the next tab

Need any specific help with the booking process?"""

            # Default response
            else:
                bot_message = f"""I understand you're asking about: "{message}"

I can help you with:
- 📅 **Booking appointments**
- 👤 **Patient registration**
- 🔍 **Finding available slots**
- ❌ **Cancellations**
- 📋 **Form completion**
- 📊 **Appointment status**

Could you please be more specific about what you'd like to do? For example:
- "I need to schedule an appointment"
- "Help me register as a patient"
- "Check available doctors"
- "Cancel my appointment" """

            history.append([message, bot_message])
            return "", history

        except Exception as e:
            error_msg = f"❌ Sorry, I encountered an error: {str(e)}\n\nPlease try again or call (555) 123-4567 for assistance."
            history.append([message, error_msg])
            return "", history

    # Create the Gradio interface
    with gr.Blocks(title="MediCare Appointment Scheduling System", theme=gr.themes.Soft()) as app:

        gr.Markdown("# 🏥 MediCare Allergy & Wellness Center")
        gr.Markdown("## AI-Powered Appointment Scheduling System")

        with gr.Tabs():

            # Tab 1: Patient Registration
            with gr.TabItem("👤 Patient Registration"):
                gr.Markdown("### Patient Information")
                gr.Markdown("*Complete this step first before scheduling an appointment*")

                with gr.Row():
                    first_name = gr.Textbox(label="First Name *", placeholder="John", value="")
                    last_name = gr.Textbox(label="Last Name *", placeholder="Doe", value="")

                with gr.Row():
                    dob = gr.Textbox(label="Date of Birth *", placeholder="MM/DD/YYYY", value="")
                    phone = gr.Textbox(label="Phone Number *", placeholder="(555) 123-4567", value="")

                email = gr.Textbox(label="Email Address *", placeholder="john.doe@email.com", value="")

                gr.Markdown("### Insurance Information (Optional)")
                with gr.Row():
                    insurance = gr.Dropdown(
                        choices=["Blue Cross Blue Shield", "Aetna", "United Healthcare", "Cigna", "Humana", "Kaiser Permanente"],
                        label="Insurance Carrier",
                        allow_custom_value=True,
                        value=""
                    )
                    member_id = gr.Textbox(label="Member ID", placeholder="123456789", value="")

                group_number = gr.Textbox(label="Group Number", placeholder="ABC123", value="")

                register_btn = gr.Button("Register/Lookup Patient", variant="primary")
                patient_output = gr.Textbox(label="Registration Result", lines=12, interactive=False)

                # Connect event handler
                register_btn.click(
                    fn=process_patient_details,
                    inputs=[first_name, last_name, dob, phone, email, insurance, member_id, group_number],
                    outputs=patient_output
                )

            # Tab 2: Schedule Appointment
            with gr.TabItem("📅 Schedule Appointment"):
                gr.Markdown("### Schedule Your Appointment")
                gr.Markdown("*Patient must be registered first*")

                with gr.Row():
                    apt_doctor = gr.Dropdown(
                        choices=scheduler.doctors,
                        label="Select Doctor *",
                        value=""
                    )
                    apt_location = gr.Dropdown(
                        choices=scheduler.locations,
                        label="Select Location *",
                        value=""
                    )

                check_slots_btn = gr.Button("Check Available Slots", variant="secondary")
                slots_output = gr.Textbox(label="Available Time Slots", lines=15, interactive=False)

                gr.Markdown("### Book Your Appointment")

                with gr.Row():
                    booking_first_name = gr.Textbox(label="First Name *", placeholder="John")
                    booking_last_name = gr.Textbox(label="Last Name *", placeholder="Doe")

                with gr.Row():
                    booking_dob = gr.Textbox(label="Date of Birth *", placeholder="MM/DD/YYYY")
                    booking_date = gr.Textbox(label="Appointment Date *", placeholder="MM/DD/YYYY or YYYY-MM-DD")

                booking_time = gr.Textbox(label="Appointment Time *", placeholder="10:30 AM or 10:30")

                book_btn = gr.Button("Book Appointment", variant="primary")
                booking_output = gr.Textbox(label="Booking Confirmation", lines=15, interactive=False)

                # Connect event handlers
                check_slots_btn.click(
                    fn=show_available_slots,
                    inputs=[apt_doctor, apt_location],
                    outputs=slots_output
                )

                book_btn.click(
                    fn=book_appointment_final,
                    inputs=[booking_first_name, booking_last_name, booking_dob, apt_doctor, apt_location, booking_date, booking_time],
                    outputs=booking_output
                )

            # Tab 3: Reminder System
            with gr.TabItem("🔔 Reminder System"):
                gr.Markdown("### Appointment Management")
                gr.Markdown("*Manage your existing appointments*")

                reminder_apt_id = gr.Textbox(
                    label="Appointment ID *",
                    placeholder="APT1234",
                    info="Found in your confirmation email"
                )

                reminder_action = gr.Textbox(
                    label="Action *",
                    placeholder="CANCEL, CONFIRM, or STATUS",
                    info="For cancellation, use: CANCEL [reason]"
                )

                reminder_btn = gr.Button("Process Request", variant="primary")
                reminder_output = gr.Textbox(label="Response", lines=12, interactive=False)

                # Connect event handler
                reminder_btn.click(
                    fn=handle_reminder_action,
                    inputs=[reminder_apt_id, reminder_action],
                    outputs=reminder_output
                )

            # Tab 4: Admin Dashboard
            with gr.TabItem("📊 Admin Dashboard"):
                gr.Markdown("### System Overview")

                with gr.Row():
                    stats_btn = gr.Button("Refresh Statistics", variant="secondary")
                    appointments_btn = gr.Button("View Recent Appointments", variant="secondary")

                stats_output = gr.Textbox(label="System Statistics", lines=10, interactive=False)
                appointments_output = gr.Textbox(label="Recent Appointments", lines=15, interactive=False)

                # Connect event handlers
                stats_btn.click(
                    fn=get_system_stats,
                    outputs=stats_output
                )

                appointments_btn.click(
                    fn=get_appointments_list,
                    outputs=appointments_output
                )

            # Tab 5: AI Chat Assistant
            with gr.TabItem("🤖 AI Chat Assistant"):
                gr.Markdown("### MediCare AI Assistant")
                gr.Markdown("*Ask questions about appointments, registration, or get help*")

                chatbot = gr.Chatbot(
                    label="AI Assistant",
                    height=400,
                    show_label=True
                )

                with gr.Row():
                    chat_input = gr.Textbox(
                        label="Message",
                        placeholder="Ask me about appointments, registration, or any questions...",
                        scale=4
                    )
                    chat_send = gr.Button("Send", variant="primary", scale=1)

                chat_clear = gr.Button("Clear Chat", variant="secondary")

                # Connect event handlers
                chat_input.submit(
                    fn=smart_chat_response,
                    inputs=[chat_input, chatbot],
                    outputs=[chat_input, chatbot]
                )

                chat_send.click(
                    fn=smart_chat_response,
                    inputs=[chat_input, chatbot],
                    outputs=[chat_input, chatbot]
                )

                chat_clear.click(
                    fn=lambda: ([], ""),
                    outputs=[chatbot, chat_input]
                )

        # Footer
        gr.Markdown("""
---
### 🏥 MediCare Contact Information
**Phone:** (555) 123-4567 | **Email:** appointments@medicare-clinic.com
**Address:** 123 Health Street, Medical District, City, State 12345
**Hours:** Monday-Friday 8:00 AM - 6:00 PM | Saturday 9:00 AM - 2:00 PM
        """)

    return app

# Launch the application
if __name__ == "__main__":
    app = create_gradio_interface()
    app.launch(
        server_name="0.0.0.0",
        server_port=None,  # Let Gradio find an available port
        share=False,
        debug=True,
        show_error=True
    )